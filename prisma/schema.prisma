datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int? // for Kakao

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                   @unique
  username                String?                   @unique
  emailVerified           DateTime?                 @map("email_verified")
  image                   String?
  accounts                Account[]
  sessions                Session[]
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 

model Conversation {
  id                     String                    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  ConversationParticipant ConversationParticipant[]
  Message                Message[]
  latestMesssageId       String?                    @unique
  latestMesssage         Message?                  @relation(fields: [latestMesssageId], references: [id], name: "latestConversationMessage", onDelete: NoAction, onUpdate: NoAction)
}

model ConversationParticipant {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  userId               String
  conversationId       String
  user                 User         @relation(fields: [userId], references: [id])
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  hasSeenLatestMessage Boolean
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  senderId       String
  conversationId String
  sender         User          @relation(fields: [senderId], references: [id])
  isLatestIn     Conversation? @relation(name: "latestConversationMessage")
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
}
