datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

// Next-auth Setting
model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?   @unique
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  role          Role      @default(VISITOR)
  nickname      Comment[] @relation("getUserName")
  profileImage  Comment[] @relation("getUserImage")

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 코멘트
model Comment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  message      String
  postId       String
  user         User      @relation("getUserName", fields: [nickname], references: [username])
  nickname     String
  image        User      @relation("getUserImage", fields: [profileImage], references: [image], onUpdate: Cascade)
  profileImage String
  parent       Comment?  @relation("NestedComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?
  children     Comment[] @relation("NestedComments")
  secret       Boolean   @default(false)
  likes        Like[]

  @@map("comments")
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@unique([userId, commentId])
  @@map("likes")
}

enum Role {
  VISITOR
  ADMIN
}
